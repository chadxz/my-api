IMAGE_NAME := my-api
REGISTRY := docker.pkg.github.com/chadxz
DOCKER_REPO_NAME := my-api/$(IMAGE_NAME)
GIT_BRANCH_NAME := $(shell git rev-parse --abbrev-ref HEAD | sed "sX/X-Xg")
GIT_TAG_NAME := $(shell git describe --always HEAD)

TAGS := $(GIT_BRANCH_NAME) $(GIT_TAG_NAME)

ifeq ($(GIT_BRANCH_NAME),master)
  TAGS += latest
endif

TAGS := $(foreach t,$(TAGS),$(REGISTRY)/$(DOCKER_REPO_NAME):$(t))

#
# Pull any existing docker image
#
pull:
	-docker pull $(REGISTRY)/$(DOCKER_REPO_NAME)
.PHONY: pull

#
# run the app in Docker
#
run: build
	docker-compose up
.PHONY: run

#
# docker build the image
#
build:
	docker build -t $(DOCKER_REPO_NAME) .
.PHONY: build

#
# Run the tests in Docker
#
test: build
	docker-compose \
		-f docker-compose.yml \
		-f docker-compose.mapped.yml \
		run my-api npm run test
.PHONY: test

#
# Run the tests in Docker for continuous integration.
#
ci-test: build
	docker-compose \
		-f docker-compose.yml \
		run --name my-api-ci-test my-api npm run ci-test
	docker cp my-api-ci-test:/usr/src/app/coverage .
.PHONY: ci-test

#
# docker tag the build
#
tag: build
	@echo $(TAGS) | xargs -n 1 docker tag $(DOCKER_REPO_NAME)
.PHONY: tag

#
# docker push the tags to the respoke registry
#
push: tag
	@echo $(TAGS) | xargs -n 1 docker push
.PHONY: push

#
# Continuous integration process
#
ci: pull build ci-test tag push
	@echo $(GIT_TAG_NAME) > version.txt
.PHONY: ci

#
# stop and remove any containers networks, images, or volumes created
# by this build
#
clean-containers:
	docker-compose down --volumes
.PHONY: clean-containers

#
# quick cleanup; leaves things that are expensive to remove or rebuild
#
clean: clean-containers
	rm -rf coverage/
	rm -f version.txt
.PHONY: clean

#
# remove any images generated by this build
#
clean-images: clean-containers
	docker images -f 'label=chadxz.name=$(IMAGE_NAME)' \
				  --format="{{.Repository}} {{.Tag}} {{.ID}}" | \
		awk '{ \
			if ($$2=="<none>") { \
				print $$3 \
			} else { \
				print $$1 ":" $$2 \
			} \
		}' | \
		xargs docker rmi
.PHONY: clean-images

#
# clean everything up
#
really-clean: clean clean-images
	rm -rf node_modules
.PHONY: really-clean
